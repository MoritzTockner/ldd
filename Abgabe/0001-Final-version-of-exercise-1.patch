From 1b69a339c3c446d248eee09a6ad27a64a0c41bbc Mon Sep 17 00:00:00 2001
From: Moritz Tockner <moritz.tockner@a1.net>
Date: Thu, 10 Oct 2019 16:28:26 +0200
Subject: [PATCH 1/1] Final version of exercise 1.

---
 Abgabe/Verstaendnisfragen.txt       | 77 +++++++++++++++++++++++++++++
 linux-de1-soc/drivers/misc/Kconfig  | 12 +++++
 linux-de1-soc/drivers/misc/Makefile |  2 +
 linux-de1-soc/drivers/misc/hello.c  | 23 +++++++++
 linux-de1-soc/drivers/misc/hello2.c | 26 ++++++++++
 linux-de1-soc/localversion          |  1 +
 6 files changed, 141 insertions(+)
 create mode 100644 Abgabe/Verstaendnisfragen.txt
 create mode 100644 linux-de1-soc/drivers/misc/hello.c
 create mode 100644 linux-de1-soc/drivers/misc/hello2.c
 create mode 100644 linux-de1-soc/localversion

diff --git a/Abgabe/Verstaendnisfragen.txt b/Abgabe/Verstaendnisfragen.txt
new file mode 100644
index 000000000..b0e00c69a
--- /dev/null
+++ b/Abgabe/Verstaendnisfragen.txt
@@ -0,0 +1,77 @@
+1.) Warum ist diese Versionsprüfung nötig?
+---------------------------------------------------------------------------------------------
+Damit die kompilierte Binärdatei zum verwendeten Linux Kernel kompatibel ist.
+Sind die Versionen unterschiedlich kann der Binärtreiber eventuell nicht mehr funktionieren
+=> keine stabile ABI (= application binary interface) und API (= application programmming interface)
+Da wir die selbe Kernelversion verwenden wollen, wird diese aus dem Status des aktuellen git-Repository abgeleitet.
+Somit wird in der .scmversion Datei der aktuelle git-Repository Zustand abgespeichert. Die localversion Datei hingegen wird 
+benötigt, um den Versionssuffix and die Versionsnummer anzuhängen. 
+In unserem Fall würde die Kernelversion wie folgt lauten: "4.9.0-de1soc"
+
+
+2.) Welche Informationen ergeben sich für das implementierte Kernelmodul?
+Beschreiben Sie die einzelnen Einträge und erklären Sie, woher die jeweiligen Informationen stammen (Quellcode, Konfigurationsdatei etc.).
+---------------------------------------------------------------------------------------------
+filename:	/home/hsd/hello2.ko
+version:	2.0
+description:	Module Hello 2
+author:		Moritz Tockner
+author:		Simon Schneeberger
+license:	GPL
+srcversion:	5657DC760B3C613CC9CD7A7
+depends:	
+intree:		Y
+vermagic:	4.9.0-de1soc SMP mod_unload ARMv7 p2v8
+parm:		who:charp
+
+filename:	/home/hsd/hello.ko
+version:	1.0
+description:	Module Hello
+author:		Moritz Tockner
+author:		Simon Schneeberger
+license:	GPL
+srcversion:	B9AFA11B3402D246D42B010
+depends:
+intree:		Y
+vermagic:	4.9.0-de1soc SMP mod_unload ARMv7 p2v8
+
+hello.c:
+MODULE_VERSION("1.0") --> version: 1.0 
+Numeriert die aktuelle version des moduls
+
+MODULE_LICENSE("GPL") --> license GPL
+Das Modul unterliegt der "GNU General Public License", was anderen Personen erlaubt die Software auszuführen, zu studieren, zu ändern und zu verbreiten.
+
+MODULE_DESCRIPTION("Module Hello") --> description: Module Hello
+Kurze beschreibung des Moduls.
+
+MODULE_AUTHOR(...) --> author: ...
+Autor(en) des Moduls.
+
+hello2.c:
+MODULE_VERSION("2.0") --> version: 2.0
+MODULE_LICENSE("GPL") --> license GPL
+MODULE_DESCRIPTION("Module Hello 2") --> description: Module Hello
+MODULE_AUTHOR(...) --> author: ...
+module_param(who, charp, 0) --> parm: who:charp
+Zeigt die Parameter des Moduls an, und dessen datentypen (hier char pointer).
+
+localversion:
+-de1soc --> vermagic: "Versionsnummer"-de1soc ...
+Version des Kernels, mit dem das Modul kompatibel ist.
+
+Makefile und Kconfig:
+Einträge für hello und hello2 hinzugefügt --> intree: Y
+Modul wird 'intree' zum kernel hinzugefügt.
+
+
+3.) Nennen Sie ein Ihrer Meinung nach sinnvolles Beispiel für einen Parameter eines beliebigen
+Moduls auf Ihrem Entwicklungssystem (nicht dem Zielsystem). Verwenden Sie dazu das
+sysfs-Interface unter /sys/module/<modulename>/parameters. Denken Sie daran,
+dass Ihnen auch der Quellcode der Module (lokal sowie online 2 ) bereitsteht, falls Sie der
+Auswirkung eines Parameters genauer nachgehen möchten.
+---------------------------------------------------------------------------------------------
+Beispiel: /sys/module/battery
+Bei diesem Modul kann das Zeitintervall für den Ladezustand der Batterie mittels dem Parameter
+"cache_time" eingestellt werden. Beispielsweise können 1000 (ms) eingestellt werden und für diesen
+Zeitraum wird der Akkustand abgespeichert und erst danach wieder neu abgerufen.
diff --git a/linux-de1-soc/drivers/misc/Kconfig b/linux-de1-soc/drivers/misc/Kconfig
index e579c955d..0f8b3bde7 100644
--- a/linux-de1-soc/drivers/misc/Kconfig
+++ b/linux-de1-soc/drivers/misc/Kconfig
@@ -783,6 +783,18 @@ config ALTERA_ILC
 	  This enables the Interrupt Latency Counter driver for the Altera
 	  SOCFPGA platform.
 
+config HELLO_1
+	tristate "Module Hello 1"
+	help
+	  This prints "Hello, World!" after loading the module and "Goodbye, World!" after deloading the module.
+	  To see the output enter dmesg in the console.
+
+config HELLO_2
+	tristate "Module Hello 2"
+	help
+	  This prints with given parameter "Hello, <parameter>!" after loading the module and "Goodbye, <parameter>!" after deloading the module.
+	  To see the output enter dmesg in the console.
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/linux-de1-soc/drivers/misc/Makefile b/linux-de1-soc/drivers/misc/Makefile
index fd6d0be2d..58a7f5333 100644
--- a/linux-de1-soc/drivers/misc/Makefile
+++ b/linux-de1-soc/drivers/misc/Makefile
@@ -56,6 +56,8 @@ obj-$(CONFIG_ECHO)		+= echo/
 obj-$(CONFIG_VEXPRESS_SYSCFG)	+= vexpress-syscfg.o
 obj-$(CONFIG_CXL_BASE)		+= cxl/
 obj-$(CONFIG_PANEL)             += panel.o
+obj-$(CONFIG_HELLO_1)           += hello.o
+obj-$(CONFIG_HELLO_2)           += hello2.o
 
 lkdtm-$(CONFIG_LKDTM)		+= lkdtm_core.o
 lkdtm-$(CONFIG_LKDTM)		+= lkdtm_bugs.o
diff --git a/linux-de1-soc/drivers/misc/hello.c b/linux-de1-soc/drivers/misc/hello.c
new file mode 100644
index 000000000..aebb42546
--- /dev/null
+++ b/linux-de1-soc/drivers/misc/hello.c
@@ -0,0 +1,23 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+
+static int __init hello_init(void)
+{
+	pr_info("Hello, World!\n");
+	return 0;
+}
+
+static void __exit hello_exit(void)
+{
+	pr_info("Goodbye, World!\n");
+}
+
+module_init(hello_init);
+module_exit(hello_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Simon Schneeberger");
+MODULE_AUTHOR("Moritz Tockner");
+MODULE_DESCRIPTION("Module Hello");
+MODULE_VERSION("1.0");
diff --git a/linux-de1-soc/drivers/misc/hello2.c b/linux-de1-soc/drivers/misc/hello2.c
new file mode 100644
index 000000000..20ec6d4a5
--- /dev/null
+++ b/linux-de1-soc/drivers/misc/hello2.c
@@ -0,0 +1,26 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+
+static char *who = "World";
+module_param(who, charp, 0);
+
+static int __init hello_init(void)
+{
+	pr_info("Hello, %s!\n", who);
+	return 0;
+}
+
+static void __exit hello_exit(void)
+{
+	pr_info("Goodbye, %s!\n", who);
+}
+
+module_init(hello_init);
+module_exit(hello_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Simon Schneeberger");
+MODULE_AUTHOR("Moritz Tockner");
+MODULE_DESCRIPTION("Module Hello 2");
+MODULE_VERSION("2.0");
diff --git a/linux-de1-soc/localversion b/linux-de1-soc/localversion
new file mode 100644
index 000000000..7655abab2
--- /dev/null
+++ b/linux-de1-soc/localversion
@@ -0,0 +1 @@
+-de1soc
\ No newline at end of file
-- 
2.20.1

